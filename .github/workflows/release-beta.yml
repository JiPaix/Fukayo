name: Release Beta
on:
  push:
    branches:
      - beta
    paths-ignore:
      - '**.md'
      - '**.spec.js'
      - '.idea'
      - '.gitignore'
      - '.github/**'
      - '!.github/workflows/release.yml'
      - '!.github/workflows/beta.yml'
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
defaults:
  run:
    shell: 'bash'


jobs:

  draft:
    runs-on: ubuntu-latest
    outputs:
      release-note: ${{ steps.release-note.outputs.release-note }}
      version: ${{ steps.version.outputs.build-version }}
      draft-id: ${{ steps.draft-create.outputs.id }}
      has-updated: ${{ steps.version-updated.outputs.has-updated }}
    steps:

      - uses: JiPaix/package-json-updated-action
        id: version-updated
        with:
          path: package.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/checkout@v2
        if: steps.version-updated.outputs.has-updated
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v2
        if: steps.version-updated.outputs.has-updated
        with:
          node-version: 14

      - name: Get version
        id: version
        if: steps.version-updated.outputs.has-updated
        run: echo "::set-output name=build-version::${{steps.version-updated.outputs.current-package-version}}-beta"

      - name: Get last git tag
        if: steps.version-updated.outputs.has-updated
        id: tag
        run: echo "::set-output name=last-tag::$(git describe --tags --abbrev=0 || git rev-list --max-parents=0 ${{github.ref}})"

      - name: Generate release notes
        if: steps.version-updated.outputs.has-updated
        uses: ./.github/actions/release-notes
        id: release-note
        with:
          from: ${{ steps.tag.outputs.last-tag }}
          to: ${{ github.ref }}
          include-commit-body: true
          include-abbreviated-commit: true

      - name: Waiting on All checks
        if: steps.version-updated.outputs.has-updated
        uses: lewagon/wait-on-check-action@v0.2
        with:
          ref: ${{ github.ref }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          running-workflow-name: 'draft'

      - name: Delete outdated drafts
        if: steps.version-updated.outputs.has-updated
        uses: hugo19941994/delete-draft-releases@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release Draft
        if: steps.version-updated.outputs.has-updated
        id: draft-create
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          prerelease: true
          draft: true
          tag_name: v${{ steps.version.outputs.build-version }}
          name: v${{ steps.version.outputs.build-version }}
          body: ${{ steps.release-note.outputs.release-note }}

  upload_artifacts:
    if: ${{ needs.draft.outputs.has-updated }}
    needs: [ draft ]
    strategy:
      matrix:
        os: [ windows-latest, ubuntu-latest ]
    #    To compile the application for different platforms, use:
    #    os: [ macos-latest, ubuntu-latest, windows-latest ]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        with:
          node-version: 18 # Need for npm >=7.7
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # The easiest way to transfer release notes to a compiled application is create `release-notes.md` in the build resources.
      # See https://github.com/electron-userland/electron-builder/issues/1511#issuecomment-310160119
      - name: Prepare release notes
        env:
          RELEASE_NOTE: ${{ needs.draft.outputs.release-note }}
        run: echo "$RELEASE_NOTE" >> ./buildResources/release-notes.md

      # Compile app and upload artifacts
      - name: Compile & release Electron app
        run: |
          npm run build
          if [ "$RUNNER_OS" == "Linux" ]; then
              npm run publish:linux
          elif [ "$RUNNER_OS" == "Windows" ]; then
              npm run publish:win
          elif [ "$RUNNER_OS" == "macOS" ]; then
              npm run publish:mac
          else
              echo "$RUNNER_OS not supported"
              exit 1
          fi
        shell: bash
        env:
          VITE_APP_VERSION: ${{ needs.draft.outputs.version }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Log in to the Container registry
        if: matrix.os == 'ubuntu-latest'
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        if: matrix.os == 'ubuntu-latest'
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
      - name: Build and push Docker image
        if: matrix.os == 'ubuntu-latest'
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  publish:
    needs: [ draft, upload_artifacts ]

    strategy:
      matrix:
        os: [ ubuntu-latest ]

    runs-on: ${{ matrix.os }}
    steps:
      - name: Publish release
        uses: eregon/publish-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ needs.draft.outputs.draft-id }}
